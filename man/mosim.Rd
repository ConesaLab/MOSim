% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MOSim.R
\name{mosim}
\alias{mosim}
\title{mosim}
\usage{
mosim(omics, omicsOptions = NULL, ...)
}
\arguments{
\item{omics}{Character vector containing the list of omics to simulate it can also be an
associative list with the omic names as keys and their options
as values. This is the prefered way of indicating the omics to simulate using the default
parameters. Possible omics: "RNA-seq", "DNase-seq", "ChIP-seq", "miRNA-seq", "Methyl-seq" (case sensitive).}

\item{omicsOptions}{Associative list containing the options for each omic to simulate. This is
used in conjunction with the helper methods omicSim to create the associative list
in a friendly way, and omicData to provide custom data; see the related section for
more information.}

\item{...}{Additional options to be passed to simulation object}

\item{diffGenes}{A number with the total number of differential genes (if value > 1) or % or
total genes (if value < 1).}

\item{numberReps}{Number of replicates of the experiment.}

\item{numberGroups}{Number of samples considered on the experiment.}

\item{randomSeed}{Random seed for random number generator state.}

\item{times}{Numeric vector containing the measured times. If numberGroups < 2,
the number of times must be at least 2.}

\item{TFtoGene}{Boolean indicating if default transcription factors data should be used or not, or
a 3 column data frame containing custom associations.}

\item{noiseFunction}{Noise function to apply when simulating counts. Must accept the parameter 'n' and
return a vector of the same length. Defaults to `rnorm`}

\item{noiseParam}{Named list with the parameters to apply to the noise function.}

\item{profiles}{Named list containing the patterns with their coefficients.}

\item{profileProbs}{Numeric vector with the probabilities to assign each of the patterns. Defaults to 0.2 for each.}
}
\value{
Instance of class "Simulation" with slot "simData" containing the multiomic simulation data.
}
\description{
Performs a multiomic simulation by chaining two actions:
 1) Creating the "Simulation" class with the provided params.
 2) Calling "simulate" method on the initialized object.
}
\examples{
\dontrun{

 moSimulation <- mosim(
     omics = c("RNA-seq"),
     numberReps = 3,
     times = c(0, 2, 6, 12, 24),
     randomSeed = 1234
 )

 # Retrieve simulated count matrix for RNA-seq
 dataRNAseq <- omicResults(moSimulation, "RNA-seq")

}
}
